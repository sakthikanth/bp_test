'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createGetDepth;

var _glFbo = require('gl-fbo');

var _glFbo2 = _interopRequireDefault(_glFbo);

var _depth = require('../../pass/depth');

var _depth2 = _interopRequireDefault(_depth);

var _aBigTriangle = require('a-big-triangle');

var _aBigTriangle2 = _interopRequireDefault(_aBigTriangle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function glFboDepth(input, bindLocation) {
  return input.depth.bind(bindLocation);
}

function createGetDepth(multipass) {
  /*
   * The multipass renderer can read to the depth from a framebuffer,
   * so use this more efficient functionality.
   */
  if (multipass.canReadDepth) {
    return glFboDepth;
  }

  /*
  * Create a color framebuffer that holds depth, and then render
  * the input depth to this FBO. Then bind it to the passed in bind
  * location.
  */
  var fbo = (0, _glFbo2.default)(multipass.gl, multipass.resolution);
  var depthPass = (0, _depth2.default)();
  depthPass.initGL(multipass);
  var renderScreen = _aBigTriangle2.default.bind(null, multipass.gl);

  return function renderedDepth(input, bindLocation) {
    debugger;
    fbo.shape = input.shape;
    fbo.bind();
    depthPass.render(input, renderScreen);
    fbo.color[0].bind(bindLocation);
    return bindLocation;
  };
}