'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createBloomPass;

var _glShader = require('gl-shader');

var _glShader2 = _interopRequireDefault(_glShader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VERTEX = require('fs').readFileSync(__dirname + '/../utils/pass-through.glsl', 'utf8');
var FRAGMENT = require('fs').readFileSync(__dirname + '/index.frag', 'utf8');
var KERNEL_STEPS = 4;

function initGL(pass, multipass) {
  pass.shader = (0, _glShader2.default)(multipass.gl, VERTEX, FRAGMENT);

  var pixelRatio = [0, 0];

  pass.render = function render(input, renderScreen) {
    pass.shader.bind();

    pass.shader.uniforms.uResolution = multipass.resolution;
    pass.shader.uniforms.uResolutionRatio = multipass.resolution[1] / multipass.resolution[0];
    pass.shader.uniforms.uInput = input.color[0].bind(0);
    pass.shader.uniforms.uKernelSize = pass.kernelSize / KERNEL_STEPS / 2;
    pass.shader.uniforms.uPower = Math.log(pass.power);
    pass.shader.uniforms.uIntensity = pass.intensity;

    renderScreen();
  };
}

function addGui(pass, gui) {
  var folder = gui.addFolder('Bloom');
  gui.add(pass, 'kernelSize', 0, 0.5).step(0.001);
  gui.add(pass, 'intensity', 0, 1).step(0.001);
  gui.add(pass, 'power', 0.0001, 10).step(0.001);

  return folder;
}

function BloomPass(config) {
  this.shader = null;
  this.render = null;

  this.intensity = config.intensity;
  this.kernelSize = config.kernelSize;
  this.power = config.power;

  this.initGL = initGL.bind(null, this);
  this.addGui = addGui.bind(null, this);
  this.gui = config.gui ? addGui(this, config.gui) : null;
}

function createBloomPass(props) {
  var config = Object.assign({
    intensity: 0.5,
    kernelSize: 0.05,
    power: 2
  }, props);

  return new BloomPass(config);
}